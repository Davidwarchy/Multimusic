/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jmusic;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.midi.InvalidMidiDataException;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.MidiUnavailableException;
import javax.sound.midi.Receiver;
import javax.sound.midi.Sequence;
import javax.sound.midi.Sequencer;
import javax.swing.Icon;
import javax.swing.ImageIcon;

/**
 *
 * @author gracelyn
 */
public class SeqwencerJPanel extends javax.swing.JPanel {

    /**
     * Creates new form TaskPaneJPanel
     */
    public SeqwencerJPanel() throws MidiUnavailableException {
        initComponents();
        try {
            initIcons();
        } catch (MalformedURLException ex) {
            Logger.getLogger(SeqwencerJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        initSequencer();
    }

    private Icon playIcon;
    private Icon pauseIcon;
    private Icon stopIcon;
    private Icon recordingIcon;

    private void initIcons() throws MalformedURLException {
        playIcon = new ImageIcon("./src/images/playimage.png");
        pauseIcon = new ImageIcon("./src/images/pauseimage.png");
        stopIcon = new ImageIcon("./src/images/stop.png");

        File file = new File("./src/images/newlycreatedGIF1.gif");
        URL url = file.toURI().toURL();

        recordingIcon = new ImageIcon(url);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jSeparator6 = new javax.swing.JSeparator();
        jToolBar2 = new javax.swing.JToolBar();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        recordToSequenceJButton = new javax.swing.JButton();
        recordingTimeJButton = (ClockButton)recordingTimeJButton;
        recordingTimeJButton = new ClockButton();
        stopRecordingToSequenceJButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        playPauseSequenceJButton = new javax.swing.JButton();
        timePlayingJButton = new ClockButton();
        stopPlayingJButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        saveSequenceJButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        jSeparator8 = new javax.swing.JToolBar.Separator();

        jToolBar1.setRollover(true);

        jToolBar2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar2.setRollover(true);
        jToolBar2.setMaximumSize(new java.awt.Dimension(530, 50));
        jToolBar2.setMinimumSize(new java.awt.Dimension(530, 50));
        jToolBar2.add(jSeparator3);

        recordToSequenceJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/recordimage.png"))); // NOI18N
        recordToSequenceJButton.setFocusable(false);
        recordToSequenceJButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        recordToSequenceJButton.setMaximumSize(new java.awt.Dimension(40, 40));
        recordToSequenceJButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        recordToSequenceJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordToSequenceJButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(recordToSequenceJButton);

        recordingTimeJButton.setText("Time");
        recordingTimeJButton.setFocusable(false);
        recordingTimeJButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        recordingTimeJButton.setMaximumSize(new java.awt.Dimension(100, 40));
        recordingTimeJButton.setMinimumSize(new java.awt.Dimension(100, 40));
        recordingTimeJButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        recordingTimeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordingTimeJButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(recordingTimeJButton);

        stopRecordingToSequenceJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stop.png"))); // NOI18N
        stopRecordingToSequenceJButton.setFocusable(false);
        stopRecordingToSequenceJButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopRecordingToSequenceJButton.setMaximumSize(new java.awt.Dimension(40, 40));
        stopRecordingToSequenceJButton.setMinimumSize(new java.awt.Dimension(40, 40));
        stopRecordingToSequenceJButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stopRecordingToSequenceJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopRecordingToSequenceJButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(stopRecordingToSequenceJButton);
        jToolBar2.add(jSeparator1);

        playPauseSequenceJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/playimage.png"))); // NOI18N
        playPauseSequenceJButton.setFocusable(false);
        playPauseSequenceJButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playPauseSequenceJButton.setMaximumSize(new java.awt.Dimension(40, 40));
        playPauseSequenceJButton.setMinimumSize(new java.awt.Dimension(40, 40));
        playPauseSequenceJButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        playPauseSequenceJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playPauseSequenceJButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(playPauseSequenceJButton);

        timePlayingJButton.setText("Time");
        timePlayingJButton.setFocusable(false);
        timePlayingJButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        timePlayingJButton.setMaximumSize(new java.awt.Dimension(100, 40));
        timePlayingJButton.setMinimumSize(new java.awt.Dimension(100, 40));
        timePlayingJButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(timePlayingJButton);

        stopPlayingJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stop.png"))); // NOI18N
        stopPlayingJButton.setFocusable(false);
        stopPlayingJButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopPlayingJButton.setMaximumSize(new java.awt.Dimension(40, 40));
        stopPlayingJButton.setMinimumSize(new java.awt.Dimension(40, 40));
        stopPlayingJButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stopPlayingJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopPlayingJButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(stopPlayingJButton);
        jToolBar2.add(jSeparator2);

        saveSequenceJButton.setText("Save");
        saveSequenceJButton.setEnabled(false);
        saveSequenceJButton.setFocusable(false);
        saveSequenceJButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveSequenceJButton.setMaximumSize(new java.awt.Dimension(100, 40));
        saveSequenceJButton.setMinimumSize(new java.awt.Dimension(100, 40));
        saveSequenceJButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(saveSequenceJButton);
        jToolBar2.add(jSeparator4);
        jToolBar2.add(jSeparator7);
        jToolBar2.add(jSeparator8);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void recordToSequenceJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordToSequenceJButtonActionPerformed
        // TODO add your handling code here:
        ClockButton timePJB = (ClockButton) this.recordingTimeJButton;
        timePJB.startTimer();
        this.recordToSequenceJButton.setIcon(recordingIcon);
        this.startRecordingToSequence();

        this.playPauseSequenceJButton.setEnabled(false);
        this.stopPlayingJButton.setEnabled(false);

    }//GEN-LAST:event_recordToSequenceJButtonActionPerformed

    private void stopPlayingJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopPlayingJButtonActionPerformed
        // TODO add your handling code here:
        ClockButton timePJB = (ClockButton) timePlayingJButton;
        timePJB.resetTimer();
        this.stopPlayingSequence();
        this.pauseOrPlay = 0;
        this.playPauseSequenceJButton.setIcon(playIcon);

    }//GEN-LAST:event_stopPlayingJButtonActionPerformed

    private void stopRecordingToSequenceJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopRecordingToSequenceJButtonActionPerformed
        // TODO add your handling code here:
        //remember to start timer by pressing '%' on the green panel
        ClockButton timePJB = (ClockButton) timePlayingJButton;
        this.stopRecordingToSequence();
        this.stopRecordingEnableOtherButtons();
        timePJB.pauseTimer();
    }//GEN-LAST:event_stopRecordingToSequenceJButtonActionPerformed

    private void playPauseSequenceJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playPauseSequenceJButtonActionPerformed
        // TODO add your handling code here:
        ClockButton timePJB = (ClockButton) timePlayingJButton;
        //to Play
        if (this.pauseOrPlay == 0) {

            timePJB.startTimer();
            this.pauseOrPlay = 1;
            this.playingDisableOtherButtons();
            this.playPauseSequenceJButton.setIcon(pauseIcon);
            this.playSequence();
        } else {
            timePJB.pauseTimer();
            this.pauseOrPlay = 0;
            this.pauseSequence();
            this.playPauseSequenceJButton.setIcon(playIcon);
        }
    }//GEN-LAST:event_playPauseSequenceJButtonActionPerformed

    private void recordingTimeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordingTimeJButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_recordingTimeJButtonActionPerformed

    private void playingDisableOtherButtons() {
        this.recordToSequenceJButton.setEnabled(false);
        this.stopRecordingToSequenceJButton.setEnabled(false);
    }

    private void stoppedPlayingEnableOtherButtons() {
        this.recordToSequenceJButton.setEnabled(true);
        this.stopRecordingToSequenceJButton.setEnabled(true);
    }

    private void startRecordingDisableOtherButtons() {

    }

    private void stopRecordingEnableOtherButtons() {
        this.playPauseSequenceJButton.setEnabled(true);
        this.stopPlayingJButton.setEnabled(true);
        this.saveSequenceJButton.setEnabled(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JButton playPauseSequenceJButton;
    private javax.swing.JButton recordToSequenceJButton;
    private javax.swing.JButton recordingTimeJButton;
    private javax.swing.JButton saveSequenceJButton;
    private javax.swing.JButton stopPlayingJButton;
    private javax.swing.JButton stopRecordingToSequenceJButton;
    private javax.swing.JButton timePlayingJButton;
    // End of variables declaration//GEN-END:variables

    private Sequencer sequencer;
    private Sequence sequence;
    private Receiver receiver;
    private int pauseOrPlay = 0;
    private long playTime;

    private void initSequencer() throws MidiUnavailableException {
        sequencer = MidiSystem.getSequencer();
        receiver = sequencer.getReceiver();

        if (sequencer == null) {
            System.out.println("<< SequencerJPanel >> :: Unable to obtain sequencer.");
        }

    }

    private void playSequence() {

        try {

            sequencer.open();
//            File myFile = new File("./src/music/newmidi.mid");
//            sequence    =  MidiSystem.getSequence(myFile);
            sequencer.setSequence(sequence);
            sequencer.start();

        } catch (MidiUnavailableException | InvalidMidiDataException ex) {
            Logger.getLogger(SeqwencerJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void pauseSequence() {
        sequencer.stop();
    }

    private void stopPlayingSequence() {
        sequencer.stop();
    }

    public Sequencer getSequencer() {
        return sequencer;
    }

    public void setSequencer(Sequencer sequencer) {
        this.sequencer = sequencer;
    }

    public void startRecordingToSequence() {
        try {

            sequencer.open();
            sequence = new Sequence(Sequence.PPQ, 1);
            sequencer.setTempoFactor(1);
            sequence.createTrack();
            sequencer.setSequence(sequence);
            sequencer.recordEnable(sequence.getTracks()[0], 0);
            sequencer.startRecording();

        } catch (MidiUnavailableException | InvalidMidiDataException ex) {
            Logger.getLogger(SeqwencerJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void stopRecordingToSequence() {

        sequencer.stopRecording();
        sequencer.close();

        try {
            MidiSystem.write(sequence, 0, new File("./src/music/newmidi.mid"));
            System.out.println("Write to newmidi.mid successful.");
        } catch (IOException ex) {
            Logger.getLogger(SeqwencerJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
}
